export function GetStatus(){return WebPhone.status}export function onJsSIPLoaded(t){let i=[];t.sockets.forEach(function(n){let t=new JsSIP.WebSocketInterface(n);i.push(t)});t.sockets=i;WebPhone=new JsSIP.UA(t);window.WebPhone=WebPhone;WebPhone.on("connected",n.bind(this,"onConnected"));WebPhone.on("disconnected",n.bind(this,"onDisconnected"));WebPhone.on("newMessage",n.bind(this,"onNewMessage"));WebPhone.on("registered",n.bind(this,"onRegistered"));WebPhone.on("unregistered",n.bind(this,"onUnregistered"));WebPhone.on("registrationFailed",n.bind(this,"onRegistrationFailed"));WebPhone.on("ringing",n.bind(this,"onRinging"));WebPhone.on("ack",n.bind(this,"onAck"));WebPhone.on("newRTCSession",n.bind(this,"onNewRTCSession"));WebPhone.start();r(function(n){console.debug("test error: ",n)},function(){});u()}function n(n,t){switch(n){case"onNewRTCSession":t=t.session;t.toJSON=i;break;case"onDisconnected":console.debug(t)}DotNetObjectReference.invokeMethodAsync(n,t)}function i(){var n={};for(const t of["id","direction","status"])n[t]=this[t];return n}function r(n,t){navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia;navigator.getUserMedia({audio:!0,video:!0},t,n);MediaDevices()}async function u(){console.debug(navigator.mediaDevices);console.debug(await navigator.mediaDevices.getSupportedConstraints());f();return;const n=await navigator.mediaDevices.getUserMedia({video:!0})}async function f(){let i=await MediaDevices(),n=undefined;if(i.forEach(function(t){n||t.kind!=="videoinput"||(n=t)}),n){let i=document.getElementById(t);i||(i=document.createElement("video"),i.id=t,document.body.appendChild(i));const r=await navigator.mediaDevices.getUserMedia({video:{deviceId:{exact:n.deviceId}}});"srcObject"in i?i.srcObject=r:i.src=URL.createObjectURL(r)}}export var WebPhone,DotNetObjectReference;export const Reference=async function(n,t){DotNetObjectReference=t;let i=await new Promise(t=>{require([n],function(n){t(n)})});window.JsSIP=i;await t.invokeMethodAsync("onDependenciesLoaded",i)};let t="media-player-self";export const MediaDevices=async function(){if(!navigator.mediaDevices||!navigator.mediaDevices.enumerateDevices){console.warn("enumerateDevices() not supported.");return}return await new Promise(n=>{navigator.mediaDevices.enumerateDevices().then(n).catch(function(n){console.error(n.name+": "+n.message)})})};
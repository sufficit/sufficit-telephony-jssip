export function GetStatus(){return n.status}export function onJsSIPLoaded(i){let r=[];i.sockets.forEach(function(n){let t=new JsSIP.WebSocketInterface(n);r.push(t)});i.sockets=r;n=new JsSIP.UA(i);window.WebPhone=n;n.on("connected",t.bind(this,"onConnected"));n.on("disconnected",t.bind(this,"onDisconnected"));n.on("newMessage",t.bind(this,"onNewMessage"));n.on("registered",t.bind(this,"NotifyRegistered"));n.on("unregistered",t.bind(this,"NotifyUnregistered"));n.on("registrationFailed",t.bind(this,"NotifyRegistrationFailed"));n.on("ringing",t.bind(this,"onRinging"));n.on("ack",t.bind(this,"onAck"));n.on("newRTCSession",t.bind(this,"onNewRTCSession"));n.start()}function t(n,t){switch(n){case"onNewRTCSession":t=t.session;t.toJSON=e;break;case"onDisconnected":console.debug(t);break;case"NotifyRegistered":case"NotifyUnregistered":case"NotifyRegistrationFailed":u.invokeMethodAsync(n,t);return}r.invokeMethodAsync(n,t)}function e(){var n={};for(const t of["id","direction","status"])n[t]=this[t];return n}var n,r,u;export*;let i="media-player-self",f="audio-player-remote";export const Reference=async function(n,t,i){if(r=t,u=i,!window.JsSIP){const t=document.getElementById("jssip");t?await window.JsSIPLoading:window.JsSIPLoading=await new Promise(t=>{console.debug("resolving: ",n),CreateScriptTag(n,()=>t(window.JsSIP),document.body)})}await t.invokeMethodAsync("onDependenciesLoaded",window.JsSIP)},CreateScriptTag=function(n,t,i){var r=document.createElement("script");r.id="jssip";r.src=n;r.onload=t;r.onreadystatechange=t;i.appendChild(r)};export const TestDevices=async function(n){console.debug("testing devices request: {0}",n);let t=!1,i;navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.mediaDevices.getUserMedia;const r=new Promise(function(t,i){navigator.getUserMedia(n,t,i)}),u=await r.then(()=>t=!0).catch(n=>i=`(${n.code}) ${n.name} => ${n.message}`);return console.debug("response: ",u),{request:n,success:t,message:i}};export const MediaDeviceUpdate=async function(n,t){console.debug(`MediaDeviceUpdate => ${n} :: ${t}`);switch(n){case"audiooutput":AttachSinkId(t);break;case"videoinput":{let n=document.getElementById(i);n||(n=document.createElement("video"),n.id=i,document.body.appendChild(n));const r=await navigator.mediaDevices.getUserMedia({video:{deviceId:{exact:t}}});"srcObject"in n?n.srcObject=r:n.src=URL.createObjectURL(r);break}}},BrowserOutputSelectSupport=function(){return!("sinkId"in HTMLMediaElement.prototype)},AttachSinkId=function(n){const t=document.getElementById(f);typeof t.sinkId!="undefined"?t.setSinkId(n).then(()=>{console.log(`Success, audio output device attached: ${n}`)}).catch(n=>{let t=n;n.name==="SecurityError"&&(t=`You need to use HTTPS for selecting audio output device: ${n}`);console.error(t);audioOutputSelect.selectedIndex=0}):console.warn("Browser does not support output device selection.")};export const MediaDevices=async function(){if(!navigator.mediaDevices||!navigator.mediaDevices.enumerateDevices){console.warn("enumerateDevices() not supported.");return}return await new Promise(n=>{navigator.mediaDevices.enumerateDevices().then(n).catch(function(n){console.error(n.name+": "+n.message)})})};